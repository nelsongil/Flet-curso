import os

import flet
import requests # Para ver datos de usuario
import json # para ver datos del token
from flet import ElevatedButton, LoginEvent, Page
from flet.auth.providers import GitHubOAuthProvider

def main(page: Page):
    provider = GitHubOAuthProvider(
        client_id=os.getenv("GITHUB_CLIENT_ID"),
        client_secret=os.getenv("GITHUB_CLIENT_SECRET"),
        redirect_url="http://localhost:8550/api/oauth/redirect",
    )

    def login_button_click(e):
        page.login(provider, scope=["public_repo"])

    def on_login(e: LoginEvent):
        if not e.error:
            print("Name:", page.auth.user["name"])
            print("Login:", page.auth.user["login"])
            print("Email:", page.auth.user["email"])
            
            headers = {"Authorization": "Bearer {}".format(page.auth.token.access_token)}
            repos_resp = requests.get("https://api.github.com/user/repos", headers=headers)
            user_repos = json.loads(repos_resp.text)
            for repo in user_repos:
                print(repo["full_name"])
                
            access_token = page.auth.token.access_token
            print(f"Access Token: {access_token}")
                
            toggle_login_buttons()

    def logout_button_click(e):
        page.logout()

    def on_logout(e):
        toggle_login_buttons()

    def toggle_login_buttons():
        login_button.visible = page.auth is None
        logout_button.visible = page.auth is not None
        page.update()

    login_button = ElevatedButton("Login con GitHub", on_click=login_button_click)
    logout_button = ElevatedButton("Logout", on_click=logout_button_click)
    toggle_login_buttons()
    page.on_login = on_login
    page.on_logout = on_logout
    page.add(login_button, logout_button)

flet.app(target=main, port=8550, view=flet.WEB_BROWSER)